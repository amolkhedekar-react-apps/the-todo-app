{"version":3,"sources":["components/todo_list/utils/date-time.js","components/todo_list/form/Form.js","components/todo_list/form/UpdateForm.js","components/todo_list/task/Task.js","components/todo_list/todoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["today","Date","hour","getHours","minutes","getMinutes","seconds","getSeconds","prepand","Form","inputText","tasks","setInput","setTasks","btnClass","test","className","type","placeholder","value","onChange","e","target","onClick","preventDefault","id","Math","floor","random","title","completed","createdAt","datetime","UpdateForm","updateTaskHandler","setTitle","closeEdit","Task","taskClass","editClass","task","completeTaskHandler","editTaskHandler","deleteTaskHandler","useState","edit","setEdit","view","toggleEditForm","TodoList","filteredTasks","setFilteredTasks","input","clicked","setClicked","status","setStatus","index","newTitle","editedTaskList","map","useEffect","localStorage","getItem","setItem","JSON","stringify","localTasks","parse","getLocalTasks","filter","item","filterTaskHandler","allCount","contentToDisplay","completedCount","pedingCount","length","key","userTasks","el","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79d74017.chunk.js","sourcesContent":["// Get Current Time\nconst getCurrentTime = () => {\n  let today = new Date();\n\n  let hour = today.getHours();\n  let minutes = today.getMinutes();\n  let seconds = today.getSeconds();\n  let prepand = hour >= 12 ? \"PM\" : \"AM\";\n  hour = hour >= 12 ? hour - 12 : hour;\n  if (hour === 0 && prepand === \"PM\") {\n    if (minutes === 0 && seconds === 0) {\n      hour = 12;\n      prepand = \"Noon\";\n    } else {\n      hour = 12;\n      prepand = \"PM\";\n    }\n  }\n  if (hour === 0 && prepand === \"AM\") {\n    if (minutes === 0 && seconds === 0) {\n      hour = 12;\n      prepand = \"Midnight\";\n    } else {\n      hour = 12;\n      prepand = \"AM\";\n    }\n  }\n\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  const currentTime = hour + \":\" + minutes + \" \" + prepand;\n  return currentTime;\n};\n\nexport default { getCurrentTime };\n","import React from \"react\";\nimport \"./Form.css\";\nimport datetime from \"../utils/date-time\";\nfunction Form({ inputText, tasks, setInput, setTasks }) {\n  const inputChangeHandler = (e) => {\n    setInput(e.target.value);\n  };\n  const submitTaskHandler = (e) => {\n    e.preventDefault();\n    setTasks([\n      ...tasks,\n      {\n        id: Math.floor(Math.random() * 10000),\n        title: inputText,\n        completed: false,\n        createdAt: datetime.getCurrentTime(),\n      },\n    ]);\n    setInput(\"\");\n  };\n  let btnClass =\n    inputText === \"\" || /^\\s*$/.test(inputText) ? \"hide\" : \"button__add\";\n  return (\n    <form className=\"form\">\n      <input\n        className=\"form__input\"\n        type=\"text\"\n        placeholder=\"Add a task ...\"\n        value={inputText}\n        onChange={inputChangeHandler}\n      />\n      <button className={btnClass} type=\"submit\" onClick={submitTaskHandler}>\n        <i className=\"fa fa-plus\"></i>\n      </button>\n    </form>\n  );\n}\n\nexport default Form;\n","import React, { useState } from \"react\";\nimport \"./UpdateForm.css\";\n\nfunction UpdateForm({ updateTaskHandler, title, setTitle, closeEdit }) {\n  const inputChangeHandler = (e) => {\n    setTitle(e.target.value);\n  };\n\n  return (\n    <form className=\"update__form\">\n      <h3 className=\"update__form__title\">Edit task </h3>\n      <div className=\"update__formContainer\">\n        <textarea\n          id=\"update__input\"\n          type=\"text\"\n          placeholder=\"\"\n          className=\"update__input\"\n          onChange={inputChangeHandler}\n          value={title}\n        />\n        <div className=\"update__buttonDiv\">\n          <button\n            className=\"button__update\"\n            type=\"submit\"\n            onClick={updateTaskHandler}\n          >\n            Save\n          </button>\n          <button className=\"button__cancel\" type=\"button\" onClick={closeEdit}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default UpdateForm;\n","import React, { useState } from \"react\";\nimport UpdateForm from \"../form/UpdateForm\";\nimport \"./Task.css\";\nfunction Task({\n  id,\n  task,\n  completeTaskHandler,\n  editTaskHandler,\n  deleteTaskHandler,\n}) {\n  const [edit, setEdit] = useState(false);\n  const [title, setTitle] = useState(task.title);\n  let taskClass;\n  let editClass;\n  if (task) {\n    taskClass = task.completed === true ? \"task completed\" : \"task\";\n    editClass = task.completed === true ? \"hide\" : \"btn--edit\";\n  }\n  const toggleEditForm = () => {\n    setEdit(!edit);\n  };\n  const updateTaskHandler = (e) => {\n    e.preventDefault();\n    if (title) {\n      editTaskHandler(id, title);\n      setEdit(!edit);\n    }\n  };\n  let view;\n  if (edit == false) {\n    view = (\n      <div className={taskClass}>\n        <span className=\"task__createdAt\">{task ? task.createdAt : \"\"} </span>\n        <li>{task ? task.title : \"\"}</li>\n        <button className=\"btn--complete\" onClick={completeTaskHandler}>\n          <i className=\"fa fa-check\"></i>\n        </button>\n        <button className={editClass} onClick={toggleEditForm}>\n          <i className=\"fa fa-pencil\"></i>\n        </button>\n        <button className=\"btn--delete\" onClick={deleteTaskHandler}>\n          <i className=\"fa fa-trash-o\"></i>\n        </button>\n      </div>\n    );\n  } else {\n    view = (\n      <UpdateForm\n        updateTaskHandler={updateTaskHandler}\n        title={title}\n        setTitle={setTitle}\n        closeEdit={toggleEditForm}\n      />\n    );\n  }\n\n  return <div className=\"task__main\">{view}</div>;\n}\n\nexport default Task;\n","import React, { useState, useEffect } from \"react\";\nimport Form from \"../form/Form\";\nimport Task from \"../task/Task\";\nimport \"./TodoList.css\";\n\nfunction TodoList() {\n  const [tasks, setTasks] = useState([]);\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [clicked, setClicked] = useState(false);\n  const [status, setStatus] = useState(\"all\");\n\n  const filterTaskHandler = () => {\n    switch (status) {\n      case \"completed\":\n        setFilteredTasks(tasks.filter((item) => item.completed == true));\n        break;\n      case \"pending\":\n        setFilteredTasks(tasks.filter((item) => item.completed == false));\n        break;\n      default:\n        setFilteredTasks(tasks);\n    }\n  };\n\n  const completeTaskHandler = (index) => {\n    const userTasks = [...tasks];\n    const task = userTasks[index];\n    task.completed = !clicked;\n    userTasks[index] = task;\n    setTasks(userTasks);\n    setClicked(!clicked);\n  };\n\n  const editTaskHandler = (index, newTitle) => {\n    const editedTaskList = tasks.map((task) => {\n      if (index === task.id) {\n        return { ...task, title: newTitle };\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  };\n\n  const deleteTaskHandler = (index) => {\n    const userTasks = [...tasks];\n    setTasks(userTasks.filter((el) => el.id !== index));\n  };\n\n  const clearAllTasksHandler = () => {\n    setTasks([]);\n  };\n\n  const saveLocalTasks = () => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  };\n\n  const getLocalTasks = () => {\n    if (localStorage.getItem(\"tasks\") === null) {\n      localStorage.setItem(\"tasks\", JSON.stringify([]));\n    } else {\n      let localTasks = JSON.parse(localStorage.getItem(\"tasks\"));\n      setTasks(localTasks);\n    }\n  };\n\n  useEffect(() => {\n    getLocalTasks();\n  }, []);\n  useEffect(() => {\n    saveLocalTasks();\n  }, [tasks]);\n  useEffect(() => {\n    filterTaskHandler();\n  }, [tasks, status]);\n\n  let allCount,\n    completedCount = 0,\n    pedingCount = 0;\n  allCount = tasks.length;\n  tasks.map((item, index) => {\n    if (item.completed) {\n      completedCount = completedCount + 1;\n    } else {\n      pedingCount = pedingCount + 1;\n    }\n  });\n  const showAll = () => {\n    setStatus(\"all\");\n  };\n  const showCompleted = () => {\n    setStatus(\"completed\");\n  };\n  const showPending = () => {\n    setStatus(\"pending\");\n  };\n  let contentToDisplay;\n  if (allCount == 0) {\n    contentToDisplay = <p className=\"todo__noTasks\">You have no tasks yet.</p>;\n  } else {\n    contentToDisplay = (\n      <div>\n        {\" \"}\n        <div className={allCount == 0 ? \"hide\" : \"todo__filter\"}>\n          <div className=\"todo__filter__button\">\n            <div className=\"filter__buttonDiv\">\n              <button className=\"filter__button\" onClick={showAll}>\n                All <i className=\"fa fa-angle-down\"></i>\n              </button>\n              <p className=\"filter__count\">{allCount}</p>\n            </div>\n            <div className=\"filter__buttonDiv\">\n              <button className=\"filter__button\" onClick={showCompleted}>\n                Completed <i className=\"fa fa-angle-down\"></i>\n              </button>\n              <p className=\"filter__count\">{completedCount}</p>\n            </div>\n            <div className=\"filter__buttonDiv\">\n              <button className=\"filter__button\" onClick={showPending}>\n                Pending <i className=\"fa fa-angle-down\"></i>\n              </button>\n              <p className=\"filter__count\">{pedingCount}</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"todo__container\">\n          <ul className=\"todo__list\">\n            {filteredTasks.map((item, index) => {\n              return (\n                <Task\n                  key={index}\n                  id={item.id}\n                  task={item}\n                  completeTaskHandler={() => {\n                    completeTaskHandler(index);\n                  }}\n                  editTaskHandler={editTaskHandler}\n                  deleteTaskHandler={() => {\n                    deleteTaskHandler(item.id);\n                  }}\n                />\n              );\n            })}\n          </ul>\n          <button\n            className={allCount == 0 ? \"hide\" : \"button--clear\"}\n            onClick={clearAllTasksHandler}\n          >\n            Clear All\n          </button>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"todo\">\n      <header>To Do List</header>\n      <Form\n        inputText={input}\n        tasks={tasks}\n        setInput={setInput}\n        setTasks={setTasks}\n      />\n      {contentToDisplay}\n    </div>\n  );\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./components/todo_list/todoList/TodoList\";\nimport \"./static/monteserrat.css\";\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <TodoList />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}